package highlightDetectionScene;

import guiComponents.ImageCropPane;
import guiComponents.ImageGridTile;
import guiComponents.ScrollableImageGridForCrop;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.BoundingBox;
import javafx.geometry.Bounds;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.shape.Circle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import main.CreatorScene;
import utils.Utils;

import java.util.ArrayList;

/**
 * Thi sis the view where the user places the circle selector over the specular ball in the image, and can run
 * the highlight detection. This view can only be reached when the user is making a highlight - detection project.
 * This layout has a {@link ScrollableImageGridForCrop} on the left, with a panel underneath with widgets to control the
 * precise position of the selected specular ball. The main part of the layout is the {@link ImageCropPane} that the
 * user can move a circular selector on to select the position of the specular ball in he image. Events generated by
 * this class are handled by the {@link HighlightDetectionLayoutListener}.
 *
 * @see HighlightDetectionLayoutListener
 * @see ScrollableImageGridForCrop
 * @see ImageCropPane
 *
 * @author Jed Mills
 */
public class HighlightDetectionLayout extends VBox implements CreatorScene{

    /** Button to run highlight detection and move to the next scene */
    private Button nextButton;

    /** Button to move back to the initial layout*/
    private Button backButton;

    /** Image grid on the left of the layout*/
    private ScrollableImageGridForCrop imageGrid;

    /** Crop pane that is the main component of the layout*/
    private ImageCropPane imageCropPane;

    /** Shows the x location of the circle selection, mapped to the actual size of the viewed image */
    private TextField sphereXField;

    /** Shows the y location of the circle selection, mapped to the actual size of the viewed image */
    private TextField sphereYField;

    /** Shows the radius of the circle selection, mapped to the actual size of the viewed image */
    private TextField sphereRField;

    /** Image for the plus buttons */
    private Image plusImage;

    /** Image for the minus buttons */
    private Image minusImage;

    /** Label for the set circle x pos at the bottom of the layout */
    private Label finalCircleXLabel;

    /** Field showing the set circle x pos at the bottom of the layout */
    private TextField finalCircleX;

    /** Label for the set circle y pos at the bottom of the layout */
    private Label finalCircleYLabel;

    /** Field showing the set circle y pos at the bottom of the layout */
    private TextField finalCircleY;

    /** Label for the set circle radius at the bottom of the layout */
    private Label finalCircleRLabel;

    /** Field showing the set circle radius at the bottom of the layout */
    private TextField finalCircleR;

    /** Label for the highlight level slider */
    private Label highlightLevelLabel;

    /** Used to set set highlight level for the highlight detection */
    private Slider highlightLevelSlider;

    /** The singleton instance of this class*/
    private static HighlightDetectionLayout ourInstance = new HighlightDetectionLayout();

    /**
     * @return {@link HighlightDetectionLayout#ourInstance}
     */
    public static HighlightDetectionLayout getInstance() {
        return ourInstance;
    }


    /**
     * Creates a new HighlightDetectionLayout with the layout described in the declaration of this class.
     */
    private HighlightDetectionLayout() {
        //images for the +/- buttons
        plusImage = new Image("images/plus.png");
        minusImage = new Image("images/minus.png");

        //layout with the image grid and ImageGCropPane
        HBox mainLayout = createMainLayout();

        //bar with the next / back button at the bottom
        HBox bottomBar = createBottomBar();

        getChildren().addAll(mainLayout, bottomBar);
        getStylesheets().add("stylesheets/default.css");
        setPadding(new Insets(5, 5, 5, 5));
        setSpacing(5);

        HighlightDetectionLayoutListener.getInstance().init(this);
    }


    /**
     * Creates the main layout with the image grid, circle selection widgets,  and image crop pane as described in the
     * declaration of this class.
     *
     * @return  the main layout, as described above
     */
    private HBox createMainLayout(){
        //contains everything in the main layout
        HBox hBox = new HBox();

            //contains the image grid and circle selector toolbox
            VBox imagesAndTools = new VBox();
                imageGrid = new ScrollableImageGridForCrop("Selected Images", false,
                                                        true, true, imageCropPane);
                imagesAndTools.setSpacing(5);

                imageGrid.setMinWidth(380);
                imageGrid.setMaxWidth(380);
                //the widgets for positioning the circle
                VBox toolsBox = createToolsBox();
            imagesAndTools.getChildren().addAll(imageGrid, toolsBox);


            VBox cropBox = new VBox();
            //contains the image crop pane
                imageCropPane = createImageCropPane(cropBox);
                imageGrid.setImageView(imageCropPane);
            cropBox.getChildren().addAll(imageCropPane);
            cropBox.setSpacing(5);
            cropBox.setAlignment(Pos.CENTER);


        hBox.getChildren().addAll(imagesAndTools, cropBox);
        hBox.setAlignment(Pos.CENTER);
        hBox.setSpacing(5);

        HBox.setHgrow(cropBox, Priority.SOMETIMES);
        HBox.setHgrow(imageGrid, Priority.ALWAYS);

        return hBox;
    }


    /**
     * Create the tools box with the widgets to position the circle selection in the
     * {@link HighlightDetectionLayout#imageCropPane}, which is located underneath the image grid.
     *
     * @return  the tools pane
     */
    private VBox createToolsBox(){
        VBox toolsBox = new VBox();

            //the title
            Label toolsBoxLabel = new Label("Highlight Processing");
            toolsBoxLabel.setFont(Font.font(null, FontWeight.BOLD, 12));

            HBox tools = new HBox();
                //has all the widgets in it
                GridPane spherePositionBox = createSpherePositionBox();

            tools.getChildren().addAll(spherePositionBox);
            tools.setAlignment(Pos.CENTER);

        toolsBox.getChildren().addAll(toolsBoxLabel, tools);
        toolsBox.setSpacing(10);
        toolsBox.setPadding(new Insets(5, 5, 5, 5));
        toolsBox.setAlignment(Pos.TOP_CENTER);
        toolsBox.getStyleClass().add("defaultBorder");
        toolsBox.setFillWidth(true);

        return toolsBox;
    }


    /**
     * Creates a new box containing the widgets to control the position and colour of the circle selector of the
     * {@link HighlightDetectionLayout#imageCropPane}.
     *
     * @return  the pane with the widgets
     */
    private GridPane createSpherePositionBox(){
        //contains all the widgets
        GridPane gridPane = new GridPane();

            //the x position row
            Label sphereXLabel = new Label("Center X:");
            GridPane.setConstraints(sphereXLabel, 0, 1);

            sphereXField = createTextField(1, 1);
            Button sphereXMinus = createButton("-", "sphereXMinus", 2, 1);
            Button sphereXPlus = createButton("+", "sphereXPlus", 3, 1);
            //---------------------

            //the y position row
            Label sphereYLabel = new Label("Center Y:");
            GridPane.setConstraints(sphereYLabel, 0, 2);

            sphereYField = createTextField(1, 2);
            Button sphereYMinus = createButton("-", "sphereYMinus", 2, 2);
            Button sphereYPlus = createButton("+", "sphereYPlus", 3, 2);
            //---------------------


            //the radius row
            Label sphereRadiusLabel = new Label("Radius:");
            GridPane.setConstraints(sphereRadiusLabel, 0, 3);

            sphereRField = createTextField(1, 3);
            Button sphereRMinus = createButton("-", "sphereRMinus", 2, 3);
            Button sphereRPlus = createButton("+", "sphereRPlus", 3, 3);
            //--------------------


            //button to set final sphere pos
            Label setSphereLabel = new Label("Set sphere:");
            GridPane.setConstraints(setSphereLabel, 0, 4);

            Button setSphereButton = new Button("Set");
            setSphereButton.setId("setSphereButton");
            setSphereButton.setOnAction(HighlightDetectionLayoutListener.getInstance());
            GridPane.setConstraints(setSphereButton, 1, 4, 3, 1);
            setSphereButton.setMaxWidth(Double.MAX_VALUE);
            //--------------------


            //dropdown to select circle selctor colour
            Label circleCropColourLabel = new Label("Selector colour:");
            GridPane.setConstraints(circleCropColourLabel, 0, 0);

            ComboBox<ImageCropPane.Colour> circleCropColourBox =
                    new ComboBox<>(FXCollections.observableArrayList(   ImageCropPane.Colour.BLACK,
                                                                        ImageCropPane.Colour.GREY,
                                                                        ImageCropPane.Colour.WHITE,
                                                                        ImageCropPane.Colour.RED,
                                                                        ImageCropPane.Colour.GREEN,
                                                                        ImageCropPane.Colour.BLUE));

            circleCropColourBox.setOnAction(HighlightDetectionLayoutListener.getInstance());
            //default colour is blue
            circleCropColourBox.getSelectionModel().select(ImageCropPane.Colour.BLUE);
            circleCropColourBox.setMaxWidth(Double.MAX_VALUE);
            GridPane.setConstraints(circleCropColourBox, 1, 0, 3, 1);
            //----------------------

        //finally done with this layout
        gridPane.getChildren().addAll(  sphereXLabel,           sphereXField,       sphereXMinus,   sphereXPlus,
                                        sphereYLabel,           sphereYField,       sphereYMinus,   sphereYPlus,
                                        sphereRadiusLabel,      sphereRField,       sphereRMinus,   sphereRPlus,
                                        setSphereLabel,         setSphereButton,
                                        circleCropColourLabel,  circleCropColourBox);


        gridPane.getStyleClass().add("noBorderClass");
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(10);
        gridPane.setVgap(10);


        return gridPane;
    }


    /**
     * Translates the circle selection in the {@link HighlightDetectionLayout#imageCropPane} by the given
     * amount, not mapped to the actual size of the image in the crop pane.
     *
     * @param dx        amount in the x to translate by
     * @param dy        amount in the y to translate by
     */
    public void translateCircleSelect(int dx, int dy){
        imageCropPane.translateCircleFromGUI(dx, dy);
    }




    /**
     * Changes the radius of the circle selection in the {@link HighlightDetectionLayout#imageCropPane} by the given
     * amount, not mapped to the actual size of the image in the crop pane.
     *
     * @param dr        amount to change the radius by
     */
    public void changeCircleR(int dr){
        imageCropPane.changeRFromGUI(dr);
    }




    /**
     * Convenience method to create a TextField that exists in a crop pane, with position in the grid given
     * by the col and row params. This method is used for the text fields in the sphere positioning pane.
     *
     * @param col   column in the grid pane this is in
     * @param row   row in the grid pane this is in
     * @return      the formatted TextField
     */
    private TextField createTextField(int col, int row){
        TextField textField = new TextField();
        GridPane.setConstraints(textField, col, row);
        textField.setEditable(false);
        //this seems to be a good size for the text fields in this layout
        textField.setPrefWidth(60);
        textField.setMinWidth(0);

        return textField;
    }




    /**
     * Convenience method to create a button that that lives in a GridPane at position (col, row), in the
     * sphere positioning pane of the {@link HighlightDetectionLayout}.
     *
     * @param label     label for the button
     * @param id        javafx css id for this button
     * @param col       column in the whatever grid pane this button is going to be in
     * @param row       row in the whatever grid pane this button is going to be in
     * @return          the brand new shiny button
     */
    private Button createButton(String label, String id, int col, int row){
        Button button = new Button();
        button.setId(id);
        button.setOnAction(HighlightDetectionLayoutListener.getInstance());
        GridPane.setConstraints(button, col, row);
        button.setShape(new Circle(12.5));

        //as this is for buttons in the circle selector positioning pane, they will only
        //be plus and minus buttons, with these nice icons
        ImageView imageView = new ImageView();
        if(label.equals("-")){
            imageView.setImage(minusImage);
        }else if(label.equals("+")){
            imageView.setImage(plusImage);
        }
        imageView.setFitWidth(8);
        imageView.setFitHeight(8);

        button.setGraphic(imageView);

        return button;
    }




    /**
     * Creates the {@link ImageCropPane} that is the main item in this layout, and has the movable circle selector in
     * it that the user uses to selected the specular ball intheir images.
     *
     * @param vBox  box that this ImageCropPane exists in
     * @return      the ImageCropPane for this layout
     */
    private ImageCropPane createImageCropPane(VBox vBox){
        ImageCropPane cropPane = new ImageCropPane(sphereXField, sphereYField,sphereRField);
        //make the pane as big as it can get in the layout
        cropPane.prefHeightProperty().bind(vBox.heightProperty());
        cropPane.prefWidthProperty().bind(vBox.widthProperty());
        cropPane.setMinHeight(0);
        cropPane.setMinWidth(0);
        //the bars at the sides/op and bottom when the image doesn't cover the whole area are black
        cropPane.setStyle("-fx-background-color: #000000;");

        return cropPane;
    }




    /**
     * Creates a new bar that goes on the bottom ofthis layout with the 'Back' and 'Detect Highlights' buttons.
     *
     * @return
     */
    private HBox createBottomBar(){
        HBox hBox = new HBox();

        hBox.getStyleClass().add("bottomBar");
            //al lthese widgets are pretty self explanatory
            backButton = new Button("< Back");
            backButton.setId("backButton");
            backButton.setOnAction(HighlightDetectionLayoutListener.getInstance());

            finalCircleXLabel = new Label("Final X:");
            finalCircleX = createBottomField("finalXField");

            finalCircleYLabel = new Label("Final Y:");
            finalCircleY = createBottomField("finalCircleY");

            finalCircleRLabel = new Label("Final R:");
            finalCircleR = createBottomField("finalCircleR");

            //the slider for the user to choose the highlight threshold in the highlight detection, higher threshold
            //should be used for brighter, better quality highlights
            highlightLevelLabel = new Label("Highlight Threshold:");
            highlightLevelSlider = new Slider(0, 255, 200);
            highlightLevelSlider.setShowTickMarks(true);
            highlightLevelSlider.setShowTickLabels(true);
            highlightLevelSlider.setMajorTickUnit(50);
            highlightLevelSlider.setMinorTickCount(2);
            highlightLevelSlider.setBlockIncrement(10);

            nextButton = new Button("Detect Highlights >");
            nextButton.setId("nextButton");
            nextButton.setOnAction(HighlightDetectionLayoutListener.getInstance());

            Pane spacer = Utils.createSpacer();

        //add 'em all!!!!
        hBox.setAlignment(Pos.CENTER);
        hBox.getChildren().addAll(backButton, spacer, finalCircleXLabel, finalCircleX,
                                    finalCircleYLabel, finalCircleY, finalCircleRLabel, finalCircleR,
                                            highlightLevelLabel, highlightLevelSlider, nextButton);
        hBox.setSpacing(10);
        hBox.setPadding(new Insets(5, 5, 5, 5));

        return hBox;
    }




    /**
     * Disables the nodes for the set circle position and radius. Used when the scene has been changed back to
     * this one.
     */
    public void resetScene(){
        Utils.disableNodes(nextButton, finalCircleXLabel, finalCircleX,
                finalCircleYLabel, finalCircleY, finalCircleRLabel, highlightLevelLabel,
                    highlightLevelSlider, finalCircleR);
    }




    /**
     * Enables the nodes for the set circle position and radius. Used when the user clicks the 'set' button
     * to set the circle position for the first time.
     */
    public void enableFinalParamsNodes(){
        Utils.enableNodes(nextButton, finalCircleXLabel, finalCircleX,
                finalCircleYLabel, finalCircleY, finalCircleRLabel, highlightLevelLabel,
                highlightLevelSlider, finalCircleR);
    }




    /**
     * Sets the text in the final circle pos fields to the given values.
     *
     * @param x     x position of the circle selection
     * @param y     y position of the circle selection
     * @param r     radius of the circle selection
     */
    public void setFinalParamsFields(int x, int y, int r){
        finalCircleX.setText(String.valueOf(x));
        finalCircleY.setText(String.valueOf(y));
        finalCircleR.setText(String.valueOf(r));
    }




    /**
     * Gets the values from the final x, y, r and threshold widgets at the bottom of the layout.
     *
     * @return  the values from the components
     */
    public int[] getFinalParamsFields(){
        //pretty self explanatory
        int x = Integer.parseInt(finalCircleX.getText());
        int y = Integer.parseInt(finalCircleY.getText());
        int r = Integer.parseInt(finalCircleR.getText());
        int thresh = (int) highlightLevelSlider.getValue();

        return new int[]{x, y, r, thresh};
    }




    /**
     * @return all the grid tiles in the image grid on the left of the layout
     */
    public ImageGridTile[] getGridTiles(){
        return imageGrid.getGridTiles();
    }





    /**
     * Convenience method to create the text fields at the bottom of this layout.
     *
     * @param id        JavaFX CSS id for the field
     * @return          the text field
     */
    private TextField createBottomField(String id){
        TextField textField = new TextField();
        //this is a good width for the fields at he bottom of this layout
        textField.setPrefWidth(60);
        textField.setEditable(false);
        textField.setId(id);

        return textField;
    }




    /**
     * Sets the tiles in the image grid on the left of the layout to the given grid tiles. Used when this layout is
     * switched to, so the app can pass the image tiles around without having to load the images every time the
     * layout is changed.
     *
     * @param imageGridTiles    the tiles to set into the image grid on the left
     */
    public void setTiles(ArrayList<ImageGridTile> imageGridTiles){
        for(ImageGridTile tile : imageGridTiles){
            imageGrid.addImageTile(tile);
            tile.setParent(imageGrid);
        }
    }




    /**
     * Converts the values in the tet fields linked to the image crop pane as integers. This method is used when
     * the user clicks set sphere to set the final sphere position and radius.
     *
     * @return  the values in the sphere position fields as ints [x, y, r]
     */
    public int[] getSphereVals(){
        try {
            int x = Integer.parseInt(sphereXField.getText());
            int y = Integer.parseInt(sphereYField.getText());
            int r = Integer.parseInt(sphereRField.getText());

            return new int[]{x, y, r};
        }catch(NumberFormatException e){
            return null;
        }
    }


    /**
     * Gets the rectangle which is the size of the image crop pane, used in the highlight detection process.
     *
     * @return  the bounds of the image crop pane
     */
    public Bounds getImageBounds(){
        return new BoundingBox(0, 0,
                imageCropPane.getImage().getWidth(), imageCropPane.getImage().getHeight());
    }


    /**
     * Makes the circle selection in the {@link HighlightDetectionLayout#imageCropPane} active, called when the
     * layout is first switched to to and the first imag is loaded to the crop pane, to display the circle.
     *
     * @param active    whther the selection is active
     */
    public void setCircleSelectionActive(boolean active){
        imageCropPane.setCircleActive(active);
        //position the circle in the middle of the image
        imageCropPane.setCircleSelection(imageCropPane.getImageView().getBoundsInParent().getWidth() / 2,
                                            imageCropPane.getImageView().getBoundsInParent().getHeight() / 2,
                                            30);
        imageCropPane.changeColour(ImageCropPane.Colour.BLUE);
    }


    /**
     * @param colour    colour to change th circle to, this is called when the user choose a colour from the dropdown
     */
    public void setCircleSelectionColour(ImageCropPane.Colour colour){
        imageCropPane.changeColour(colour);
    }


    /**
     * Sets image in the {@link HighlightDetectionLayout#imageCropPane} rhe image in the first tile in the
     * {@link HighlightDetectionLayout#imageGrid}, used when the alyout is first switched to and images are loaded
     * into it.
     */
    public void setFirstTileSelected(){
        imageGrid.setSelectedTile(imageGrid.getGridTiles()[0]);
    }


    /**
     * Removes all the tiles in the image grid, used when switching from this layout.
     */
    public void resetImageGrid(){
        if(imageGrid.getGridTiles().length > 0){
            imageGrid.clearTiles();
        }
    }


    /**
     * @return min width of this layout
     */
    @Override
    public int getSceneMinWidth() {
        return 1000;
    }


    /**
     * @return max width of this layout
     */
    @Override
    public int getSceneMaxWidth() {
        return Integer.MAX_VALUE;
    }


    /**
     * @return min height of this layout
     */
    @Override
    public int getSceneMinHeight() {
        return 500;
    }


    /**
     * @return max height of this layout
     */
    @Override
    public int getSceneMaxHeight() {
        return Integer.MAX_VALUE;
    }

    /**
     * Updates the size of the the components in this layout, called when the window is resized.
     *
     * @param width     width of the window
     * @param height    height of the window
     */
    @Override
    public void updateSize(double width, double height) {
        imageGrid.setTheHeight(height);
        imageCropPane.updateSize();
    }

}
